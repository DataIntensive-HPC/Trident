#include "llvm/Pass.h"
#include "llvm/Module.h"
#include "llvm/Function.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Type.h"
#include "llvm/Instructions.h"
#include "llvm/Instruction.h"
#include "llvm/Support/IRBuilder.h"
#include "llvm/Support/CommandLine.h"
//#include <string>

#include <iostream>
#include <fstream>
#include <set>
#include <list>
#include <sstream>
#include <algorithm>
#include <sstream>

using namespace llvm;

static cl::opt<std::string> cl_select_set_file_name("select_set_file", cl::desc("Specify the file of selected sets"), cl::value_desc("file name"));

namespace{
	struct bishe_insert : public ModulePass{
		static char ID;   
		std::vector<long> selectedInsts;
		std::vector<long> duplicatedInsts;
		Module *appModule;
		//Function *hook;
		bishe_insert() : ModulePass(ID) {}

		virtual bool runOnModule(Module &M)
		{

			appModule = &M;
			//Constant *hookFunc;
			//hookFunc = M.getOrInsertFunction("profileTrace", Type::getVoidTy(M.getContext()), Type::getInt64Ty(M.getContext()), NULL);

			//hook= cast<Function>(hookFunc);
			readSelectSet();

			for(Module::iterator F = M.begin(), E = M.end(); F!= E; ++F)
			{
				//errs() << F->getName() << '\n';
				//std::string functionName = F->getName();
				for(Function::iterator BB = F->begin(), E = F->end(); BB != E; ++BB)
				{
					bishe_insert::runOnBasicBlock(BB, M.getContext());
				}
			}

			errs() << "Added Duplication " << duplicatedInsts.size() << '\n';
			return false;
		}

		virtual bool runOnBasicBlock(Function::iterator &BB, LLVMContext &context)
		{
			for(BasicBlock::iterator BI = BB->begin(), BE = BB->end(); BI != BE; ++BI)           
			{
				// Check if the current index is selected
				long llfiIndex = getLLFIIndexOfInst(BI);
				if(std::find(selectedInsts.begin(), selectedInsts.end(), llfiIndex) != selectedInsts.end()) {

					// Keep a vector of all backward slice of this inst
					std::vector<Instruction*> instUsesVector;
					std::vector<int> instUsesOperandPositionVector;

					// Loop through its uses, keep track of operand positions and clone list of insts.
					instUsesVector.push_back(BI);
					instUsesOperandPositionVector.push_back(-1);

					Instruction* currentInst = BI;
					int usesEndFlag = 1;
					while(usesEndFlag){
						// Go to next use instruction
						Instruction* nextUseInstruction;
						if(currentInst->use_begin() == currentInst->use_end()){
							usesEndFlag = 0;
							break;
						}
						for(Value::use_iterator UI = currentInst->use_begin(); UI != currentInst->use_end(); UI++){
							nextUseInstruction = dyn_cast<Instruction>(*UI);
							errs() << "  -- in use: " << getLLFIIndexOfInst(nextUseInstruction) << "\n";
							instUsesVector.push_back(nextUseInstruction);
							for(unsigned int i = 0; i < nextUseInstruction->getNumOperands(); i++){
								// Keep track of operand position of last inst
								if ( nextUseInstruction->getOperand(i) == currentInst ){
									instUsesOperandPositionVector.push_back(i);
									errs() << "  -- current position: " << i << "\n";
									break;
								}
							}

						}
						currentInst = nextUseInstruction;
					}

					errs() << "Uses size: " << instUsesVector.size() << " - " << "Position size: " << instUsesOperandPositionVector.size() << "\n";

					// Loop through the instUsesVector and do the clone.
					Instruction* lastDupInst = NULL;
					Instruction* lastInst = NULL;
					Instruction* duplicatedInst = NULL;
					for(unsigned int i = 0; i < instUsesVector.size(); i++){

						Instruction* currentInst = instUsesVector.at(i);

						if(isa<CallInst>(currentInst)){
							std::string syncFuncName = "sync_check";
							std::string funcName = dyn_cast<CallInst>(currentInst)->getCalledFunction()->getName();
							errs() << "---Get function call: " << funcName << "\n";
							if (funcName.find(syncFuncName) != std::string::npos) {
								continue;
							}
						}
						// Insert sync_check function call
						if(isInstSync(currentInst) && lastDupInst != NULL){
							// Insert sync_check() external function calls
							// 1: i1
							// 2: double
							// 32: i32
							// 64: i64
							// 0: float
							int typeID = -1;
							if ( lastInst->getType()->isIntegerTy(1) ) typeID = 1;
							if ( lastInst->getType()->isIntegerTy(32) ) typeID = 32;
							if ( lastInst->getType()->isIntegerTy(8) ) typeID = 8;
							if ( lastInst->getType()->isIntegerTy(16) ) typeID = 16;
							if ( lastInst->getType()->isIntegerTy(64) ) typeID = 64;
							if ( lastInst->getType()->isDoubleTy() ) typeID = 2;
							if ( lastInst->getType()->isFloatTy() ) typeID = 0;

							if ( lastInst->getType()->isPointerTy() ){
								if (
									lastInst->getType() == Type::getInt1PtrTy(context) ||
									lastInst->getType() == Type::getInt8PtrTy(context) ||
									lastInst->getType() == Type::getInt16PtrTy(context) ||
									lastInst->getType() == Type::getInt32PtrTy(context) ||
									lastInst->getType() == Type::getInt64PtrTy(context) ||
									lastInst->getType() == Type::getDoublePtrTy(context) ||
									lastInst->getType() == Type::getFloatPtrTy(context) 
								)
									typeID = 100;
								else
									typeID = -1;								
							}
				
							if (typeID == -1){
								errs() << " ** No Type Recg\n";
							}else{
								errs() << "* Inserting function call\n";
								//insertCallToCheck(currentInst, lastDupInst, lastInst, typeID);
							}
							lastDupInst = NULL;
							lastInst = NULL;
						}
						else if(!isInstSync(currentInst) && getLLFIIndexOfInst(currentInst) != 0 ){
							duplicatedInst = currentInst->clone();
							for(unsigned int j = 0; j < duplicatedInst->getNumOperands(); j++){
								if (j == instUsesOperandPositionVector.at(i) && lastDupInst != NULL){
									duplicatedInst->setOperand(j, lastDupInst);

								}else{
									duplicatedInst->setOperand(j, currentInst->getOperand(j));
								}
							}

							// Remove llfi_index
							duplicatedInst->setMetadata("llfi_index", NULL);

							lastDupInst = duplicatedInst;
							lastInst = currentInst;
							BasicBlock::iterator nextInst = currentInst;
							nextInst++;
							duplicatedInst->insertBefore(nextInst);
						}


					}
				}

			}
			return true;
		}

		long getLLFIIndexOfInst(Instruction *inst) {
			MDNode *mdnode = inst->getMetadata("llfi_index");
			if (mdnode) {
				ConstantInt *cns_index = dyn_cast<ConstantInt>(mdnode->getOperand(0));
				return cns_index->getSExtValue();
			}
			return 0;
		}

		void readSelectSet(){
			std::ifstream select_set_file;
			select_set_file.open(cl_select_set_file_name.c_str());
			if(!select_set_file.is_open())
			{
				errs()<<"\nERROR: can not open select_set_file!\n";
				exit(1);
			}

			while(select_set_file.good())
			{
				std::string line;
				getline(select_set_file, line);
				if(line.empty())	continue;
				else
				{
					long currentIndex = atol(line.c_str());
					selectedInsts.push_back(currentIndex);
				}
			}
			//std::sort(selected_insts.begin(), selected_insts.end());
		}

		bool isInstSync(Instruction *inst){
			int opcode = inst->getOpcode();
			if(opcode == 28 || opcode < 8 || opcode >= 43) return true;
			else return false;
		}

		void insertCallToCheck(Instruction *insert_pos, Instruction *arg1_inst, Instruction *arg2_inst, int typeID){
			errs() << "Inserting at " << getLLFIIndexOfInst(insert_pos) << "\n";

			LLVMContext& context = appModule->getContext();
			Function* checker_handler;
			std::string checkerFunctionName = "";
			std::vector<Value*> checker_args(2);
			checker_args[0] = arg1_inst;
			checker_args[1] = arg2_inst;
			// We need to declare it
			std::vector<const Type*> checker_arg_types(2);

			// Based on the type ID, we create different types for arguements.
			// 1: i1
			// 2: double
			// 32: i32
			// 64: i64
			// 0: float
			switch(typeID){
				case 1:
					checker_arg_types[0] = Type::getInt1Ty(context);
					checker_arg_types[1] = Type::getInt1Ty(context);
					checkerFunctionName = "sync_check_bool";
					break;
				case 8:
					checker_arg_types[0] = Type::getInt8Ty(context);
					checker_arg_types[1] = Type::getInt8Ty(context);
					checkerFunctionName = "sync_check_int";
					break;
				case 16:
					checker_arg_types[0] = Type::getInt16Ty(context);
					checker_arg_types[1] = Type::getInt16Ty(context);
					checkerFunctionName = "sync_check_int";
					break;
				case 32:
					checker_arg_types[0] = Type::getInt32Ty(context);
					checker_arg_types[1] = Type::getInt32Ty(context);
					checkerFunctionName = "sync_check_int";
					break;
				case 64:
					checker_arg_types[0] = Type::getInt64Ty(context);
					checker_arg_types[1] = Type::getInt64Ty(context);
					checkerFunctionName = "sync_check_long";
					break;
				case 0:
					checker_arg_types[0] = Type::getFloatTy(context);
					checker_arg_types[1] = Type::getFloatTy(context);
					checkerFunctionName = "sync_check_float";
					break;
				case 2:
					checker_arg_types[0] = Type::getDoubleTy(context);
					checker_arg_types[1] = Type::getDoubleTy(context);
					checkerFunctionName = "sync_check_double";
					break;
				case 100:
					Instruction* lastInst = arg2_inst;
					checker_arg_types[0] = lastInst->getType();
					checker_arg_types[1] = lastInst->getType();
					checkerFunctionName = "sync_check_ptr";
					break;
			}

			errs() << "TYPE ID: " << typeID << "\n";
			FunctionType* checker_type = FunctionType::get(Type::getVoidTy(context), checker_arg_types, false);
			Constant* checker_handler_c = appModule->getOrInsertFunction(checkerFunctionName, checker_type);
			checker_handler = dyn_cast<Function>(checker_handler_c);
			CallInst::Create(checker_handler, checker_args.begin(), checker_args.end(), "", insert_pos);
		}

	};
}
char bishe_insert::ID = 0;
static RegisterPass<bishe_insert> X("bishe_insert", "test function exist", false, false);
